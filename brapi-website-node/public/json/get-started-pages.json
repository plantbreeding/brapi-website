[{
        "title": "Introduction",
        "html": "<p>BrAPI can be very useful for a wide variety of use cases. But with its 179 possible endpoints and 36+ different data models, it can seem overwhelming for new developers to get started. So we have created this \"Getting Started\" tutorial page to help get new community members up to speed. If you are new to BrAPI, this is the place to start!</p> <p>BrAPI is a RESTful API specification, so before reading this documentation, it will be helpful to understand a little bit about REST and how it works. There are many online resources available for learning about REST. A good starting place is <a href=\"https://www.restapitutorial.com/\" target=\"_blank\">RestApiTutorial.com</a> to understand the basics and some of the current best practices. </p> <p>If you have any specific questions about BrAPI which are not answered here, please reach out to a <a href=\"mailto:brapicoordinatorselby@gmail.com\">project coordinator</a> or join the community Slack channel. </p><h3>Additional Resources</h3><ul><li><a href=\"https://en.wikipedia.org/wiki/Application_programming_interface\" target=\"_blank\">Wikipedia (API)</a></li><li><a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\"> Wikipedia (REST)</a></li><li><a href=\"https://www.restapitutorial.com/lessons/whatisrest.html\" target=\"_blank\">What is REST</li><li><a href=\"/docs/BrAPI_101.pptx\" target=\"_blank\">BrAPI 101 Class Presentation (.pptx)</a></li><li><a href=\"/specification\" target=\"_blank\">BrAPI Specification Page</a></li><li><a href=\"https://github.com/plantbreeding/API\" target=\"_blank\">BrAPI GitHub</a></li></ul>"
    },
    {
        "title": "What is BrAPI?",
        "html": "<h3>What is BrAPI? </h3><p> <strong> BrAPI is a Standardized RESTful Web Service API Specification for plant breeding data. </strong><br/>Below is an expansion of that definition, breaking it into its individual pieces. </p><p><strong>API</strong><br/>Many computer programs have a User Interface (UI) that allows a human user to interact with the program. Similarly, an Application Programming Interface (API) is a way for one computer program to interact with another computer program. API’s come in many different forms depending on the programing language and technologies being used, but in general an API allows commands and data to be sent retrieved between applications. </p><p><strong>Web Service</strong><br/>A Web Service is any automated service available over a network (the internet or some local network). A Web Service API allows commands and data to be sent over a network automatically from one piece of software to another. For many years, SOAP was the popular standard for Web Service APIs, but in more recent years REST has become a more popular framework. </p><p><strong>REST</strong><br/>Representational State Transfer (REST) is an architectural design for building Web Services using basic HTTP standards. A command request is a combination of an HTTP Verb (GET, POST, PUT, or DELETE) and a URL that typically describes some entity. For example, the request \"GET example.com/api/people\" might return a list of people. REST does not define any required data format, but JSON is typically used to easily represent data objects. </p><p><strong>Standardized Specification</strong><br/>BrAPI is a technical Specification that software developers can easily turn into code and communicate data using the community Standard models. There is a common misconception that BrAPI is a separate tool or an application, when in-fact each group must build their own BrAPI implementation. At its core, BrAPI is just a set of documentation that defines a standard for communicating data. However, there are many resources available within the BrAPI community that make it easy to build an implementation and make your system BrAPI compliant. </p><h3> The Specification </h3><p>The core BrAPI documentation can be found on the <a href=\"/specification\" target=\"_blank\">Specification page</a>. From there you can find links to all the different versions of the standard. You can view the documentation on GitHub, Apiary, or SwaggerHub depending on your personal preference of presentation style. On GitHub, you will find the specification presented as README files, as well as the raw <a href=\"https://swagger.io/specification/\" target=\"_blank\"> OpenAPI 3 </a> formatted YAML files. Apiary is much more focused on text documentation and is often easier to read, but might be lacking in technical detail. SwaggerHub is more focused on technical detail, but human readable text definitions may be harder to find. SwaggerHub is also more interactive with a dummy server implementation to play with and a code generation tool in a variety of common programming languages. </p><p><strong>Versions</strong><br/>For BrAPI V1, the whole specification can be found on one page for each minor version. However, in BrAPI V2, the documentation was split across four modules: BrAPI-Core, BrAPI-Germplasm, BrAPI-Genotyping, and BrAPI-Phenotyping. These modules help organize the endpoint definitions into logical groups, but they have no impact on the implementation of BrAPI.</p><h3>The Community</h3><p> The BrAPI Community is an international group of developers and scientists who are invested in the BrAPI project. This community is the driving force behind the continued development of BrAPI. By contributing to the community, you can suggest changes and enhancements to the standard, use community libraries and testing resources, and easily collaborate with this international group of crop researchers. </p><p><strong>Communication</strong><br/>There are several channels for communication of the BrAPI community. General announcements and regular newsletters are sent to the mailing list. Contact the <a href=\"mailto:brapicoordinatorselby@gmail.com\">BrAPI coordinator</a> to be added to this list. There is a BrAPI community Slack workspace for direct messages and collaboration between members. <a href=\"https://join.slack.com/t/plantbreedingapi/shared_invite/enQtNjA4NTA3OTI5NjUxLWE5ZmI0NDE0NGM1ODkxMjVmMDU1MGVjY2Q5M2QxNGNkYzMyODhkNDVmZjM0ZGI1YzEwYjEwNmY0MDM1YjllZDU\" target=\"_blank\">Click HERE to join the Slack workspace</a>, and feel free to message the group with questions or requests to collaborate. The issue board on <a href=\"https://github.com/plantbreeding/API/issues\" target=\"_blank\">GitHub</a> is the best place to post issues or suggestions with the specification. On the issues board, other members of the community can comment and show support for new ideas. <br/>Finally, the BrAPI community organizes regular BrAPI hackathons. The BrAPI hackathons are a great way to travel around the world and meet the members of the community in person. Hackathons are usually held about once a year, but the location changes each year to be fair to the members of the community who have to travel long distances to attend. Hackathons are free to attend and the venues are hosted by volunteers from the community. Keep an eye on the <a href=\"/events\" target=\"_blank\"> Events page </a> and the mailing list for announcements about the next hackathon. </p>"
    },
    {
        "title": "Planning a Use case",
        "html": "<h3>Know Your Use Case</h3><p><strong> \"We want all the databases and tools to talk to each other automatically.\" </strong><br/>This phrase comes up a lot in different forms when people first start talking about how to integrate different tools and systems. This is a nice overall goal or theme, but it is too vague to develop code. A good use case should be able to tell you specifically what you want to do, and why you want to do it. For additional help when creating use cases, look at a more formal syntax like <a href=\"https://medium.com/@SteelKiwiDev/how-to-describe-user-stories-using-gherkin-language-8cffc6b888df\" target=\"_blank\">Gherkin user stories</a>. <br/>BrAPI use cases can also be described, with more technical detail, using a series of RESTful web service calls. BrAPI endpoints are designed to be modular and flexible. This means several web service calls can be combined to accomplish a complex goal. For example, to show all the locations used in a breeding program, first get all the active studies in the program, then get all the locations associated with that list of studies. </p><p><strong>Client and Server</strong><br/>BrAPI is a standard for automatically communicating data between systems, so your use case should involve at least two software applications. These applications will always fill two rolls: a client and a server. The client will make requests and the server will accept the requests and process them. It is important to have a clear understanding of which application will be a client versus server. If the use case involves more than two applications, there may be multiple clients or servers. In some cases, an application might change between roles. Use cases can quickly become complicated, which is why Sequence Diagrams are a helpful tool.</p><p><strong>Sequence Diagram</strong><br/>A <a href=\"https://en.wikipedia.org/wiki/Sequence_diagram\" target=\"_blank\">Sequence Diagram</a> is a diagram which shows the order of events over time across multiple software applications. The diagram below shows an example with three applications making requests to each other. Time increases as we move down the diagram, so we can see that App 1 first makes a request to App 2, then App 1 makes a request to App 3, then a chain of requests is passed from 1 to 2 to 3. In this case, App 1 is always a client and App 3 is always a server. App 2 is a server until the end when it becomes a client to pass a request to App 3. This kind of diagram can help clarify what applications are involved, the role and responsibilities of each, and the order in which the operations should take place. <img src=\"/images/example_seq_diagram.png\" alt=\"Example Sequence Diagram\" style=\"width: 75%;display: block;margin-left: auto;margin-right: auto;margin-top: 20px;\"></p>"
    },
    {
        "title": "Client Implementation",
        "html": "<p><strong>Client Implementation</strong><br/>A client application will have a set of functions available to communicate data back and forth with a server. These functions might be triggered by some user action, or they might be automated to perform actions in the background. They might be chained together into a series of API requests to perform a more complex action. In general, each API function must perform the following steps:<ol><li>Determine an HTTP Method and URL for the desired server endpoint. </li><li>Construct a list of query parameters, or construct a JSON object to be the body.</li><li>If required, add an Authorization token header to the request.</li><li>Send the HTTP request, wait for a response.</li><li>When the response arrives, check the HTTP Status for error codes.</li><li>If there are no errors, convert the JSON response object into a language specific data structure.</li></ol></p><p><strong>Libraries</strong><br/>For several popular programing languages, there are BrAPI client code libraries available, with the functions described above for every BrAPI call. The BrAPI community has built client libraries for R, JavaScript, Java, and Drupal (PHP). These libraries are available at <a target=\"_blank\" href=\"https://brapi.org/libraries\"> brapi.org/libraries</a>. They are all open source, community run projects, so please consider contributing back to them if you use it. <br/>Alternatively, SwaggerHub has a built in tool called swagger-code-gen. This tool allows you to generate a client library for a variety of languages, and download it directly from the SwaggerHub documentation page. On any <a target=\"_blank\" href=\"https://brapi.org/specification\"> BrAPI SwaggerHub Page</a>, click the \"Export\" menu in the top right corner, hover over \"Client SDK\", then select from the list of languages/frameworks. <br/><em>Note on generated code. Swagger-code-gen is a useful tool for converting API specs into code, but it is not perfect. Generated libraries will not be perfect, so be sure to review and test them before using in production.</em></p><p><strong>Testing</strong><br/>The <a target=\"_blank\" href=\"https://test-server.brapi.org/brapi/v2/serverinfo\"> BrAPI Test Server </a> is the primary resource for testing new BrAPI compatible client applications. The BrAPI Test Server has a complete implementation of every BrAPI endpoint with every version of the specification. It does not require authorization, but has a simple authorization system available for testing if needed. There is a Docker image available on DockerHub, so a development team could run the server independently for CI/CD testing.  <br/>All the data in the BrAPI Test Server is fake, and in some cases, unrealistic. If you are looking to test against realistic data, there are several server implementations within the BrAPI community with real data. Contact the BrAPI Slack channel to connect with another group in the community with the data you are looking for.</p><p><strong>Authorization</strong><br/>The BrAPI Community made a decision that the BrAPI standard is not responsible for how different groups implement security. Your user authentication, authorization, and user management systems are your own responsibility. However, the community agreed that an OAuth-like pattern is a best practice for communicating data over an API between systems. Every BrAPI endpoint definition includes an “Authorization” header parameter. This header is used by things like OAuth/OpenID for passing an authorization token from the client to the server. It was added to support authorization best practices in BrAPI, but it is never required for BrAPI compliance. <br/>A client application will get an authorization token (BrAPI does not care how), then make a BrAPI request with that token in the “Authorization” header. The server can validate the token (again, BrAPI does not care how this happens) and decide to return a response or not. That token might also be used to identify a specific user, so the server will only return the users specific data. <br/>There are many resources/tools online for setting up an OAuth/OpenID pattern. Some basic material has been gathered in this <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Authentication\"> BrAPI Wiki article</a>. Reach out to the BrAPI Coordinator or the community Slack channel to discuss options and security patterns in more detail.</p><p><strong>Example</strong><br/>The <a target=\"_blank\" href=\"https://github.com/plantbreeding/brapi-intro-class\"> brapi-intro-class github</a> is a repository with example BrAPI implementations. All implementations follow the same use case where a user is browsing through Programs, Trials, and Studies. The code for getting Programs is included, but the critical code for Trials and Studies is missing. Choose a programming language you are most familiar with, and then fill in the missing code to complete the use case. </p>"
    },
    {
        "title": "Server Implementation",
        "html": "<p><strong>Server Implementation </strong><br/>BrAPI server implementations are generally more work than client implementations. A server has all the code to search, retrieve, and load new data into a database. Some groups decided to implement a large number of BrAPI endpoints so they are ready for any new use cases, other groups only implement the minimum number BrAPI endpoints required to solve a specific use case. The former groups use a lot of development time in the beginning on potentially unused code, but the latter groups have to spend extra time on each new use case. Both approaches are acceptable and both are considered BrAPI compliant. <br/>Usually, a BrAPI server sits in front of a database with plant breeding related data. A lot of the work when building a BrAPI server is the mapping from the database data model to the BrAPI data model. This can be a complex and iterative process, often involving collaboration between developers and scientists. </p><p><strong>Server Stub</strong><br/>SwaggerHub has a built in tool called swagger-code-gen. This tool allows you to generate a server stub for a variety of languages, and download it directly from the SwaggerHub documentation page. This server code will have all the BrAPI model objects and RESTful endpoints, but it will have blank spaces for building JSON responses. This blank space should be filled with code to perform the mapping between database models and BrAPI models. On any <a target=\"_blank\" href=\"https://brapi.org/specification\"> BrAPI SwaggerHub Page</a>, click the \"Export\" menu in the top right corner, hover over \"Server Stub\", then select from the list of languages/frameworks. <br/><em>Note on generated code. Swagger-code-gen is a useful tool for converting API specs into code, but it is not perfect. Generated libraries will not be perfect, so be sure to review and test them before using in production.</em></p><p><strong>Testing</strong><br/>Depending on the programming language/framework being used, there are many generic testing tools available for any level of testing. For developer testing, <a target=\"_blank\" href=\"https://www.postman.com/\"> Postman</a> is highly recommended as a generic client for working with RESTful web services. For BrAPI compliance testing, <a target=\"_blank\" href=\"http://webapps.ipk-gatersleben.de/brapivalidator\"> BRAVA</a> is a tool developed by the BrAPI community to specifically test BrAPI endpoints. There is a public version of BRAVA, as well as dockerized versions for CI/CD environments. </p><p><strong>Documentation</strong><br/>It is highly recommended that every BrAPI server have a documentation page showing the available BrAPI endpoints. Each server has special requirements, additional fields, and unsupported parameters. It is important to have a place to record these small deviations from the specification. If several groups have the same deviation from the spec, the community might decide to add that as part of the next version of BrAPI. </p><p><strong>Authorization</strong><br/>The BrAPI Community made a decision that the BrAPI standard is not responsible for how different groups implement security. Your user authentication, authorization, and user management systems are your own responsibility. However, the community agreed that an OAuth-like pattern is a best practice for communicating data over an API between systems. Every BrAPI endpoint definition includes an “Authorization” header parameter. This header is used by things like OAuth/OpenID for passing an authorization token from the client to the server. It was added to support authorization best practices in BrAPI, but it is never required for BrAPI compliance. <br/>A client application will get an authorization token (BrAPI does not care how), then make a BrAPI request with that token in the “Authorization” header. The server can validate the token (again, BrAPI does not care how this happens) and decide to return a response or not. That token might also be used to identify a specific user, so the server will only return the users specific data. <br/>There are many resources/tools online for setting up an OAuth/OpenID pattern. Some basic material has been gathered in this <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Authentication\"> BrAPI Wiki article</a>. Reach out to the BrAPI Coordinator or the community Slack channel to discuss options and security patterns in more detail.</p><p><strong>Example</strong><br/>The <a target=\"_blank\" href=\"https://github.com/plantbreeding/brapi-intro-class\"> brapi-intro-class github</a> is a repository with example BrAPI implementations. All implementations follow the same use case where a user is browsing through Programs, Trials, and Studies. The code for getting Programs is included, but the critical code for Trials and Studies is missing. Choose a programming language you are most familiar with, and then fill in the missing code to complete the use case. </p>"
    },
    {
        "title": "FAQ",
        "html": "<p><strong>What is BrAPI?</strong><br/>BrAPI is a standardized RESTful web service API specification for communicating plant breeding data. The Breeding API (BrAPI) project is an effort to enable interoperability among plant breeding databases. This community driven standard is free to be used by anyone interested in plant breeding data management. <br/>Please read this page: <a href=\"/get-started/1\"> What is BrAPI?</a> If you still have questions, please contact the BrAPI Coordinator.</p><p><strong>Do I need to implement ALL of BrAPI to be compliant? </strong><br/>No. Only implement the BrAPI endpoints that make sense in your systems for your use cases. BrAPI v2.0 has 179 documented endpoints spread across a wide variety of data types. That is too many for every group in the BrAPI community to be expected to develop.</p><p><strong>How can I test if my system is BrAPI compliant?</strong><br/>The <a href=\"http://webapps.ipk-gatersleben.de/brapivalidator \"> BRAVA </a> testing tool is a community developed client application for testing BrAPI servers.</p><p><strong>How do I report a problem or suggest an enhancement to the BrAPI documentation? </strong><br/>Go to the <a href=\"https://github.com/plantbreeding/API\"> BrAPI Github </a> and create an issue. Issues are reviewed regularly, though changes might not be formally added until the next version of the specification. <br/>Do not let changes to the BrAPI specification slow down development! It can take a long time for changes to be accepted and added to the formal documentation. If you need a new field or parameter to solve your specific use case, add to your implementation, document the deviation from the standard, and keep building. The BrAPI standard will catch up to mirror existing implementations that work.</p><p><strong> How do I join the BrAPI Community? </strong><br/>Just by being interested in BrAPI and reading this, you have already taken the first step! The BrAPI Community is an international group of developers and scientists who are invested in the BrAPI project. By interacting and contributing to this group, you become a part of it. Here are some ways to get involved:<ul><li>Implement a BrAPI server or client application. </li><li>Contribute to a community BRAPP, tool, or code library.</li><li>Suggest an enhancement to the specification by creating an issue on <a href=\"https://github.com/plantbreeding/API\"> Github </a>. </li><li>Respond to an existing issue on <a href=\"https://github.com/plantbreeding/API\"> Github </a>.</li><li>Attend one of the BrAPI Community Hackathons held around the world. </li><li>Join the BrAPI Slack channel and talk directly to community members. </li><li>Join the BrAPI mailing list to receive community updates.</li></ul></p><p><strong>How does my organization become a BrAPI partner? </strong><br/><a href=\"/partners\"> BrAPI Partners </a> are organizations who support the BrAPI project. There is no formal commitment to becoming a partner, just send the organization logo and website to the BrAPI Coordinator to be posted on the Partners page.  </p><p><strong>How is BrAPI funded? Will it be sustainable long-term? </strong><br/>The BrAPI project is currently in the middle of a 4-year grant from the USDA NIFA, managed by Cornell University. This grant primarily funds the BrAPI Project Coordinator position, currently held by Peter Selby. <br/>Long-term sustainability is always a tricky question, but the BrAPI community is strong and still growing. The core of the project is just documentation, and the cost of maintaining that documentation is almost nothing. Enhancements to the specification, additional support tools, and community organization all require more time and resources, but these efforts might be spread across members in the community. With a strong, committed community, and very small maintenance cost, BrAPI will continue to exist as long as there are people using it. </p>"
    }
]